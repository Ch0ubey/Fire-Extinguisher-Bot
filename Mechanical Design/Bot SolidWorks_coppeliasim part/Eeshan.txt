function sysCall_init()
    -- do some initialization here
    RobotBase = sim.getObjectAssociatedWithScript(sim.handle_self)
    M1 = sim.getObjectHandle('M1')
    M2 = sim.getObjectHandle('M2')
    M3 = sim.getObjectHandle('M3')
    M4 = sim.getObjectHandle('M4')
    
    P11 = sim.getObjectHandle('P11')
    P12 = sim.getObjectHandle('P12')
    P13 = sim.getObjectHandle('P13')
    P14 = sim.getObjectHandle('P14')
    P15 = sim.getObjectHandle('P15')
    P16 = sim.getObjectHandle('P16')
    
    sim.setJointTargetVelocity(M1,-1)
    sim.setJointTargetVelocity(M2,-1)
    sim.setJointTargetVelocity(M3,-1)
    sim.setJointTargetVelocity(M4,-1)

end

function sysCall_actuation()
    c=0    
        if(D11 == nil) then
    D11=1
    end
        if(D12 == nil) then
    D12=1
    end
        if(D13 == nil) then
    D13=1
    end
        if(D14 == nil) then
    D14=1
    end
        if(D15 == nil) then
    D15=1
    end
        if(D16 == nil) then
    D16=1
    end
    V1 =1
    V01 = (((0.2-D11)^2)^1/2+((0.2-D12)^2)^1/2) 
    --Case 1
    if(D12>0.21 or D11>0.21 or D12<0.19 or D11<0.19) then
    c=1
    end
    
    --Case 1 Soln
    if(c==1) then
         if(D12>D11) then
          sim.setJointTargetVelocity(M1,-(1-V01))
          sim.setJointTargetVelocity(M2,-(1-V01))
          sim.setJointTargetVelocity(M4,-(1+V01))
          sim.setJointTargetVelocity(M3,-(1+V01))
          end
         if(D11>D12) then
          sim.setJointTargetVelocity(M1,-(1+V01))
          sim.setJointTargetVelocity(M2,-(1+V01))
          sim.setJointTargetVelocity(M3,-(1-V01))
          sim.setJointTargetVelocity(M4,-(1-V01))
          end
     
    end
    print(V01)
end

function sysCall_sensing()
    -- put your sensing code here
    D11 = getDistance(P11)
    D12 = getDistance(P12)
    D13 = getDistance(P13)
    D14 = getDistance(P14)
    D15 = getDistance(P15)
    D16 = getDistance(P16)
    simTime=sim.getSimulationTime()
end

function sysCall_cleanup()
    -- do some clean-up here
end

-- See the user manual or the available code snippets for additional callback functions and details
function getDistance(sensor)
  local detected, distance
  detected, distance = sim.readProximitySensor(sensor)
  if (detected<1) then
  distance = 1.0
  end
  return distance
  end


**********************

function sysCall_init()
    -- do some initialization here
    RobotBase = sim.getObjectAssociatedWithScript(sim.handle_self)
    M1 = sim.getObjectHandle('M1')
    M2 = sim.getObjectHandle('M2')
    M3 = sim.getObjectHandle('M3')
    M4 = sim.getObjectHandle('M4')
    
    P11 = sim.getObjectHandle('P11')
    P12 = sim.getObjectHandle('P12')
    P13 = sim.getObjectHandle('P13')
    P14 = sim.getObjectHandle('P14')
    P15 = sim.getObjectHandle('P15')
    P16 = sim.getObjectHandle('P16')
    
    sim.setJointTargetVelocity(M1,-1)
    sim.setJointTargetVelocity(M2,-1)
    sim.setJointTargetVelocity(M3,-1)
    sim.setJointTargetVelocity(M4,-1)

end

function sysCall_actuation()
    c=0    
    max_speed = -2
        if(D11 == nil) then
    D11=1
    end
        if(D12 == nil) then
    D12=1
    end
        if(D13 == nil) then
    D13=1
    end
        if(D14 == nil) then
    D14=1
    end
        if(D15 == nil) then
    D15=1
    end
        if(D16 == nil) then
    D16=1
    end
    
    if (D15 < 0.4) then
    sim.setJointTargetVelocity(M1,max_speed)
    sim.setJointTargetVelocity(M2,max_speed)
    sim.setJointTargetVelocity(M3,-max_speed)
    sim.setJointTargetVelocity(M4,-max_speed)
    
    else 
    if (D15>0.4 and D11<0.4 and D12<0.4) then
     
    sim.setJointTargetVelocity(M1,max_speed)
    sim.setJointTargetVelocity(M2,max_speed)
    sim.setJointTargetVelocity(M3,max_speed)
    sim.setJointTargetVelocity(M4,max_speed) 
    
     elseif(D15>0.4 and D11<0.4 and D12>0.4) then
     
    sim.setJointTargetVelocity(M1,-max_speed)
    sim.setJointTargetVelocity(M2,-max_speed)
    sim.setJointTargetVelocity(M3,max_speed)
    sim.setJointTargetVelocity(M4,max_speed)
    end
    end
   
    
end

function sysCall_sensing()
    -- put your sensing code here
    D11 = getDistance(P11)
    D12 = getDistance(P12)
    D13 = getDistance(P13)
    D14 = getDistance(P14)
    D15 = getDistance(P15)
    D16 = getDistance(P16)
    simTime=sim.getSimulationTime()
end

function sysCall_cleanup()
    -- do some clean-up here
end

-- See the user manual or the available code snippets for additional callback functions and details
function getDistance(sensor)
  local detected, distance
  detected, distance = sim.readProximitySensor(sensor)
  if (detected<1) then
  distance = 1.0
  end
  return distance
  end
  function WallLogic()
  
  end

************************************************

function sysCall_init()
    -- do some initialization here
    RobotBase = sim.getObjectAssociatedWithScript(sim.handle_self)
    M1 = sim.getObjectHandle('M1')
    M2 = sim.getObjectHandle('M2')
    M3 = sim.getObjectHandle('M3')
    M4 = sim.getObjectHandle('M4')
    
    P11 = sim.getObjectHandle('P11')
    P12 = sim.getObjectHandle('P12')
    P13 = sim.getObjectHandle('P13')
    P14 = sim.getObjectHandle('P14')
    P15 = sim.getObjectHandle('P15')
    P16 = sim.getObjectHandle('P16')
    
    sim.setJointTargetVelocity(M1,-1)
    sim.setJointTargetVelocity(M2,-1)
    sim.setJointTargetVelocity(M3,-1)
    sim.setJointTargetVelocity(M4,-1)

end

function sysCall_actuation()
    c=0    
    max_speed = -2
        if(D11 == nil) then
    D11=1
    end
        if(D12 == nil) then
    D12=1
    end
        if(D13 == nil) then
    D13=1
    end
        if(D14 == nil) then
    D14=1
    end
        if(D15 == nil) then
    D15=1
    end
        if(D16 == nil) then
    D16=1
    end
    
    if (D15 < 0.4) then
    sim.setJointTargetVelocity(M1,max_speed)
    sim.setJointTargetVelocity(M2,max_speed)
    sim.setJointTargetVelocity(M3,-max_speed)
    sim.setJointTargetVelocity(M4,-max_speed)
    
    else 
    if (D15>0.4 and D11<0.4 and D12<0.4) then
     
    sim.setJointTargetVelocity(M1,max_speed)
    sim.setJointTargetVelocity(M2,max_speed)
    sim.setJointTargetVelocity(M3,max_speed)
    sim.setJointTargetVelocity(M4,max_speed) 
    
     elseif(D15>0.4 and D11<0.4 and D12>0.4) then
     temp = simTime
     while(temp +5 > simTime) do
    sim.setJointTargetVelocity(M1,-max_speed/4)
    sim.setJointTargetVelocity(M2,-max_speed/4)
    sim.setJointTargetVelocity(M3,max_speed)
    sim.setJointTargetVelocity(M4,max_speed)
    end
    end
    end
   
    
end

function sysCall_sensing()
    -- put your sensing code here
    D11 = getDistance(P11)
    D12 = getDistance(P12)
    D13 = getDistance(P13)
    D14 = getDistance(P14)
    D15 = getDistance(P15)
    D16 = getDistance(P16)
    simTime=sim.getSimulationTime()
end

function sysCall_cleanup()
    -- do some clean-up here
end

-- See the user manual or the available code snippets for additional callback functions and details
function getDistance(sensor)
  local detected, distance
  detected, distance = sim.readProximitySensor(sensor)
  if (detected<1) then
  distance = 1.0
  end
  return distance
  end
  function WallLogic()
  
  end

*******************************************************

function PID(DSet,DRead,Kp,Ki,Kd)

   if(DSet == nil) then
    Dset = 1
    end
   if(DRead == nil) then
    DRead =1
    end
T = 0.5
 
 error = DSet - DRead
 lastError = error
 totError = error + totError
 deltaError = error - lastError

 Control = Kp*error + (Ki*T)*totError + (Kd/T)*deltaError
 lastError = error
return Control

end

**************************************************


function sysCall_init()
    -- do some initialization here
    RobotBase = sim.getObjectAssociatedWithScript(sim.handle_self)
    M1 = sim.getObjectHandle('M1')
    M2 = sim.getObjectHandle('M2')
    M3 = sim.getObjectHandle('M3')
    M4 = sim.getObjectHandle('M4')
    
    P11 = sim.getObjectHandle('P11')
    P12 = sim.getObjectHandle('P12')
    P13 = sim.getObjectHandle('P13')
    P14 = sim.getObjectHandle('P14')
    P15 = sim.getObjectHandle('P15')
    P16 = sim.getObjectHandle('P16')
    
    sim.setJointTargetVelocity(M1,-1)
    sim.setJointTargetVelocity(M2,-1)
    sim.setJointTargetVelocity(M3,-1)
    sim.setJointTargetVelocity(M4,-1)
    
    totError = 0.0
    lastError = 0.0

end

function sysCall_actuation()
    c=0    
    max_speed = -2
        if(D11 == nil) then
    D11=1
    end
        if(D12 == nil) then
    D12=1
    end
        if(D13 == nil) then
    D13=1
    end
        if(D14 == nil) then
    D14=1
    end
        if(D15 == nil) then
    D15=1
    end
        if(D16 == nil) then
    D16=1
    end
    
 print(PID(D11))
 
    sim.setJointTargetVelocity(M1,-(PID(D11)/100+1))
    sim.setJointTargetVelocity(M2,-(PID(D11)/100+1))
    sim.setJointTargetVelocity(M3,-(-PID(D11)/100+1))
    sim.setJointTargetVelocity(M4,-(-PID(D11)/100+1))
    
    sim.setJointTargetVelocity(M1,-(PID(D12)/100+1))
    sim.setJointTargetVelocity(M2,-(PID(D12)/100+1))
    sim.setJointTargetVelocity(M3,-(-PID(D12)/100+1))
    sim.setJointTargetVelocity(M4,-(-PID(D12)/100+1))

end

function sysCall_sensing()
    -- put your sensing code here
    D11 = getDistance(P11)
    D12 = getDistance(P12)
    D13 = getDistance(P13)
    D14 = getDistance(P14)
    D15 = getDistance(P15)
    D16 = getDistance(P16)
    simTime=sim.getSimulationTime()
    
end

function sysCall_cleanup()
    -- do some clean-up here
end

-- See the user manual or the available code snippets for additional callback functions and details
function getDistance(sensor)
  local detected, distance
   detected, distance = sim.readProximitySensor(sensor)
  if (detected<1) then
   distance = 1.0
  end
  return distance
end
  -- ABC
function PID(Distance)
  T = 0.5
  Kp = 0.8
  Ki = 0.001
  Kd = 0.001
 error = 0.2 - D11
 totError = error + totError
 deltaError = error - lastError

 Control = Kp*error + (Ki*T)*totError + (Kd/T)*deltaError
 lastError = error
 return(Control)
end